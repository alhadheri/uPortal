<?php

define('TOPICS_QUEUE', 'topics_queue');
define('LESSON_PLANS_QUEUE', 'lesson_plans');
define('SUB_TOPICS_QUEUE', 'sub_topics_queue');
define('SUB_TOPIC_CONTENT_QUEUE', 'sub_topic_content');
define('TOPIC_CONTENT_QUEUE', 'topic_content');
define('LESSON_PLAN_CONTENT_QUEUE', 'lesson_plans_content');
define('SERIES_CONTENT_QUEUE', 'series_content_queue');


global $ugyouthportal_data;
$ugyouthportal_data['body_classes'] = array();
$ugyouthportal_data['empty_callbacks'] = array (
	array( 'url'=>'home', 'title'=>'Welcome', 'description'=>'Welcome' ),
	array( 'url'=>'download', 'title'=>'Download', 'description'=>'Download' ),
);

/**
 * implementing hook_hook_info
 *  - showing Drupal where to find the other hooks
 */
function ugyouthportal_hook_info() {
	$hooks = array();
	static $tenten_hooks = array (
		'nodequeue' => array(),
	);
	foreach ($tenten_hooks as $group => $hooks_array) {
		foreach ($hooks_array as $hook) {
			$hooks[$hook] = array('group' => $group);
		}
	}
	return $hooks;
}


/**
 * implement hook_menu
 */
function ugyouthportal_menu() {
	global $ugyouthportal_data;
	$items = array();
	
	//empty callbacks
	foreach ($ugyouthportal_data['empty_callbacks'] as $callback) {
		$items[$callback['url']] = array (
			'title' => $callback['title'],
			'description' => $callback['description'],
			'page callback' => 'ugyouthportal_empty_content',
			'access arguments' => array('access content'),
			'type' => MENU_CALLBACK
		);
	}
	
	//menu items
	$items['admin/structure/nodequeue/ug-youth-portal/install'] = array (
		'title' => 'Install UG Youth Portal Nodequeues',
		'description' => 'Install the nodequeues needed to sort content on the UG Youth Portal',
		'page callback' => 'ugyouthportal_install_nodequeue',
		'page arguments' => array(),
		'access arguments' => array('access ugyouthportal nodequeue installation'),
		'type' => MENU_NORMAL_ITEM,
		'file' => 'ugyouthportal.install.inc',
	);
	$items['uportal/recommend-content/nojs/%'] = array(
    'title' => 'Recommend Content',
    'page callback' => 'ugyouthportal_recommend_content',
		'page arguments' => array(2,3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
	$items['uportal/recommend-content/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
  ) + $items['uportal/recommend-content/nojs/%'];
	
	return $items;
}


/**
 * implement hook_permission
 */
function ugyouthportal_permission() {
	return array (
		'access ugyouthportal nodequeue installation' => array (
			'title' => t('Access UG Youth Portal Nodequeue installation'),
			'description' => t('Access the youth portal nodequeue installation page'),
		),
	);
}


/**
 * return empty content
 */
function ugyouthportal_empty_content() {
	return '';
}


/**
 * recommend content
 */
function ugyouthportal_recommend_content($ajax, $nid) {
	$is_ajax_mode = $ajax == 'ajax';
	
	if (empty($_GET['tok']) || !drupal_valid_token($_GET['tok'], 'recommend_content' . $nid)) {
		drupal_set_message(t('Invalid security token. Please try again.'), 'error');
    drupal_goto('node/'.$nid);
		return;
  }
	
	$queue = nodequeue_load_queue_by_name('user_recommended_content');
	$subqueue = current(nodequeue_load_subqueues_by_queue($queue->qid));
	nodequeue_subqueue_add($queue, $subqueue, $nid);
	
	if ($is_ajax_mode) {
		$commands = array(
			ajax_command_invoke(NULL, 'finished_recommending_content', array())
		);
		return array (
			'#type' => 'ajax',
			'#commands' => $commands,
		);
	} else {
		drupal_set_message(t('This content has been pushed to the front page.'));
    drupal_goto('node/'.$nid);
	}
}


/**
 * implement nodequeue_nodequeue_add so as to move most recently added up to the top
 */
function ugyouthportal_nodequeue_add($sqid, $nid) {
	//user recommended content subqueue id is 25
	if ($sqid == 25) {
		$subqueue = subqueue_load($sqid);
		nodequeue_queue_front($subqueue, $subqueue->count);
	}
}


/**
 * preprocess page
 */
function ugyouthportal_preprocess_html(&$vars) {
	global $ugyouthportal_data;
	foreach ($ugyouthportal_data['body_classes'] as $body_class) {
		$vars['classes_array'][] = $body_class;
	}
}



/**
 * redirect to user/login
 */
function ugyouthportal_init() {
	global $user;
	if ($_GET['q']=='user' && $user->uid<1) {
		drupal_goto('user/login');
	}
}


/**
 * modify administration menu
 * see: http://drupal.org/node/502500 for details: #13 and #149
 */
function ugyouthportal_admin_menu_output_alter(&$content) {
  // Add a top level item for the Create content menu itself.
  $content['tentensites'] = array(
    '#theme' => 'admin_menu_links',
    '#weight' => -99,
    '#sorted' => TRUE,
  );

  // Copy the create content submenu to our backend menu.
  $content['tentensites']['create-content'] = array(
    '#title' => t('Create content'),
    '#href' => 'node/add',
    '#weight' => -10,
  );

  foreach (node_type_get_types() as $type => $object) {
    if (node_access('create', $type)) {
      $node_type_url = str_replace('_', '-', $type);
      $content['tentensites']['create-content'][$node_type_url] = array (
        '#title' => $object->name,
        '#href' => 'node/add/'. $node_type_url,
      );
    }
  }
	
	// Remove "Tasks" and "Index" from Admin Menu output
  $admin_menu_exclusions = array(
    t('Tasks'),
  );
	
	foreach($content['menu'] as $menu_key => $menu_tree) {
    if (isset($menu_tree['#title']) && in_array($menu_tree['#title'], $admin_menu_exclusions))
      unset($content['menu'][$menu_key]);
  }
	
	//sort create content links
  if (!empty($content['tentensites']['create-content'])) {
    uasort($content['tentensites']['create-content'], '_ugyouthportal_element_sort');
  }
}

/**
 * sorter: mainly for admin links
 */
function _ugyouthportal_element_sort($a, $b) {
  $a_title = (is_array($a) && isset($a['#title'])) ? $a['#title'] : '';
  $b_title = (is_array($b) && isset($b['#title'])) ? $b['#title'] : '';
  return strcasecmp($a_title, $b_title);
}



/**
 * implement node_insert
 * 	- node queue data
 * 	- file size and duration
 */
function ugyouthportal_node_insert($node) {
	_ugyouthportal_create_node_queue_data($node);
	_ugyouthportal_create_file_size_data($node);
	/*
	if (function_exists('views_invalidate_cache')) {
    views_invalidate_cache();
  }
  */
}


/**
 * implement hook_node_update
 */
function ugyouthportal_node_update($node) {
	_ugyouthportal_update_node_queue_data($node);
	_ugyouthportal_create_file_size_data($node);
}


/**
 * implement hook_node_view
 */
function ugyouthportal_node_view($node, $view_mode, $langcode) {
	$content_types = array( 'document'=>1, 'video'=>1, 'audio'=>1, );
	if (isset($content_types[$node->type]) && $view_mode=='full') {
		drupal_add_library('system', 'drupal.ajax'); //load drupal core ajax library
		drupal_add_js(
			array(
				'ugyouthportal' => array(
					'nid' => $node->nid,
					'node_type' => $node->type,
					'theme_path' => '/'.drupal_get_path('theme', 'ugyouthportal_theme'),
				)
			),
		'setting'
		);
	}
}


/**
 * implement node_delete
 *
 * nodequeue module handles this hook to delete content from queues
 * This hook is implemented to remove subqueues owned by nodes
 * e.g. on deleting a topic, also delete its subqueue
 * 
 */
function ugyouthportal_node_delete($node) {
	_ugyouthportal_remove_child_subqueue($node);
}


/**
 * update file size data
 */
function _ugyouthportal_create_file_size_data($node) {
	//update duration for video and audio
	//update number of pages for document
	
	$file_path = false;
	switch ($node->type) {
		case 'video':
			$video_field_language = field_language('node', $node, 'field_video');
			$file = file_load($node->field_video[$video_field_language][0]['fid']);
			$file_path = drupal_realpath($file->uri);
			break;
		case 'audio':
			$audio_track_field_language = field_language('node', $node, 'field_audio_track');
			$file = file_load($node->field_audio_track[$audio_track_field_language][0]['fid']);
			$file_path = drupal_realpath($file->uri);
			break;
		case 'document':
			$pdf_field_language = field_language('node', $node, 'field_pdf_file');
			$file = file_load($node->field_pdf_file[$pdf_field_language][0]['fid']);
			$file_path = drupal_realpath($file->uri);
			break;
	}
	
	if ($file_path) {
		$node->original = isset($node->original) ? $node->original : NULL;
		$file_size_field_language = field_language('node', $node, 'field_file_size_duration');
		$node->field_file_size_duration[$file_size_field_language][0]['value'] = _ugyouthportal_get_node_media_size($file_path, $node->type);
		field_attach_update('node', $node);
	}

}


/**
 * update node queue data
 *
 * topic:
 * 		- change child subqueue title
 * sub_topic, series:
 * 		- change child subqueue title
 * 		- update parent subqueue i.e. remove from old, add to new
 * 
 *
 */	
function _ugyouthportal_update_node_queue_data($node) {
	$new_node = $node;
	$old_node = node_load($node->nid);
	$old_parent_queue_and_subqueue = _ugyouthportal_get_node_queue_details($old_node);
	$child_queue_and_subqueue = _ugyouthportal_get_node_child_queue_details($node);
	
	//change parent queue details
	if ($old_parent_queue_and_subqueue['subqueue']) {
		$new_parent_nid = _ugyouthportal_get_parent_node_nid($new_node);
		$old_parent_nid = _ugyouthportal_get_parent_node_nid($old_node);
		if ($new_parent_nid != $old_parent_nid) {
			nodequeue_subqueue_remove_node($old_parent_queue_and_subqueue['subqueue']->sqid, $old_node->nid);
			_ugyouthportal_create_node_queue_data($new_node); //insert into new queue
		}
	}
	
	//change child queue details
	if ($child_queue_and_subqueue['subqueue']) {
		if ($new_node->title != $old_node->title) {
			$new_title = _ugyouthportal_get_child_queue_title($new_node);
			nodequeue_subqueue_update_title($child_queue_and_subqueue['subqueue']->sqid, $new_title);
		}
	}
}


/**
 * get parent node NID
 */
function _ugyouthportal_get_parent_node_nid($node) {
	$language_index = 'und';
	switch ($node->type) {
		case 'series':
			return $node->field_topic_reference[$language_index][0]['target_id'];
		case 'video':
		case 'audio':
		case 'document':
			if (isset($node->field_series_reference[$language_index]) && count($node->field_series_reference[$language_index])>0) {
				return $node->field_series_reference[$language_index][0]['target_id'];
			} else {
				return $node->field_topic_reference[$language_index][0]['target_id'];
			}
		default:
			return false;
	}
}


/**
 * add node to topic queue
 */
function _ugyouthportal_create_node_queue_data($node) {
	
	//add node to queue
	$queue_and_subqueue = _ugyouthportal_get_node_queue_details($node);
	//echo '<pre>';print_r($queue_and_subqueue);echo '</pre>';die('hello');
	if ($queue_and_subqueue['subqueue']) {
		nodequeue_subqueue_add($queue_and_subqueue['queue'], $queue_and_subqueue['subqueue'], $node->nid);
	}
	
	//create queue for this node's child nodes
	$child_queue_and_subqueue = _ugyouthportal_get_node_child_queue_details($node);
	
	/*
	db_insert('nodequeue_ugyouthportal')->fields( array (
		'sqid' => $new_topic_subqueue->sqid,
		'nid' => $node->nid,
	))->execute();
	*/
	
}


/**
 * implement node_delete
 */
function _ugyouthportal_remove_child_subqueue($node) {
	$child_queue_and_subqueue = _ugyouthportal_get_node_child_queue_details($node);
	if ($child_queue_and_subqueue['subqueue']) {
		nodequeue_remove_subqueue($child_queue_and_subqueue['subqueue']->sqid);
	}
}


/**
 * returns the child queue and subqueue that the node owns under itself
 * creates the subqueue if it is non-existent
 */
function _ugyouthportal_get_node_child_queue_details($node) {
	$subqueue = false;
	$parent_queue = false;
	$subqueue_title = _ugyouthportal_get_child_queue_title($node);
	$queue_names = _ugyouthportal_get_node_child_queue_name($node);
	$parent_queue_name = $queue_names['parent'];
	$subqueue_name = $queue_names['subqueue'];
	
	if ($parent_queue_name) {
		$parent_queue = nodequeue_load_queue_by_name($parent_queue_name);
		$subqueues = nodequeue_load_subqueues_by_reference( array (
			$parent_queue->qid => array($subqueue_name)
		));
		if (count($subqueues)) {
			$subqueue = current($subqueues);
		} else {
			$subqueue = nodequeue_add_subqueue($parent_queue, $subqueue_title, $subqueue_name);
		}
	}
	
	return array (
		'queue' => $parent_queue,
		'subqueue' => $subqueue,
	);
}


/**
 * get the name of the child queue
 */
function _ugyouthportal_get_node_child_queue_name($node) {
	$parent_queue_name = false;
	$subqueue_name = ($node->nid) ? ($node->type.'_'.$node->nid) : false;
	
	switch ($node->type) {
		case 'topic':
			$parent_queue_name = SUB_TOPICS_QUEUE;
			break;
		case 'sub_topic':
			$parent_queue_name = SUB_TOPIC_CONTENT_QUEUE;
			break;
		case 'series':
			$parent_queue_name = SERIES_CONTENT_QUEUE;
			break;
	}
	
	return array (
		'parent' => $parent_queue_name,
		'subqueue' => $subqueue_name,
	);
}


/**
 * get the name of the node's queue
 */
function _ugyouthportal_get_node_parent_queue_name($node) {
	$parent_queue_name = false;
	$subqueue_name = false;
	$parent_node_nid = _ugyouthportal_get_parent_node_nid($node);
	$language_index = 'und';
	
	switch ($node->type) {
		case 'topic':
			$parent_queue_name = TOPICS_QUEUE;
			break;
		case 'sub_topic':
			$parent_queue_name = SUB_TOPICS_QUEUE;
			if ($parent_node_nid) {
				$subqueue_name = 'topic_'.$parent_node_nid;
			}
			break;
		case 'series':
			$parent_queue_name = SUB_TOPIC_CONTENT_QUEUE;
			if ($parent_node_nid) {
				$subqueue_name = 'sub_topic_'.$parent_node_nid;
			}
			break;
		case 'video':
		case 'audio':
		case 'document':
			if ($parent_node_nid) {
				if (isset($node->field_series_reference[$language_index]) && count($node->field_series_reference[$language_index])>0) {
					$parent_queue_name = SERIES_CONTENT_QUEUE;
					$subqueue_name = 'series_'.$parent_node_nid;
				} else {
					$parent_queue_name = SUB_TOPIC_CONTENT_QUEUE;
					$subqueue_name = 'sub_topic_'.$parent_node_nid;
				}
			}
			break;
	}
	
	return array (
		'parent' => $parent_queue_name,
		'subqueue' => $subqueue_name,
	);
}


/**
 * returns the title of a child subqueue
 */
function _ugyouthportal_get_child_queue_title($node) {
	$child_queue_title = $node->title;
	switch ($node->type) {
		case 'topic':
			$child_queue_title .= ' Sub-topics';
			break;
		case 'sub_topic':
			$child_queue_title .= ' Sub-topic Content';
			break;
		case 'series':
			$child_queue_title .= ' Series Content';
			break;
	}
	return $child_queue_title;
}


/**
 * returns the parent queue and subqueue that the node should belong to
 */
function _ugyouthportal_get_node_queue_details($node) {
	$subqueue = false;
	$parent_queue = false;
	$queue_names = _ugyouthportal_get_node_parent_queue_name($node);
	$parent_queue_name = $queue_names['parent'];
	$subqueue_name = $queue_names['subqueue'];
	$parent_queue = nodequeue_load_queue_by_name($parent_queue_name);

	if ($parent_queue) {
		if ($node->type=='topic') {
			$subqueue = current(nodequeue_load_subqueues_by_queue($parent_queue->qid));
		} else {
			$subqueue = current(nodequeue_load_subqueues_by_reference( array (
				$parent_queue->qid => array($subqueue_name)
			)));
		}
	}
	
	return array (
		'queue' => $parent_queue,
		'subqueue' => $subqueue,
	);
}


/**
 * implement form alter
 */
function ugyouthportal_form_alter(&$form, &$form_state, $form_id) {
	
	//dsm($form);
	
	if (isset($form['field_topic_reference']) && isset($form['field_topic_reference']['#language']) && isset($form['field_topic_reference'][$form['field_topic_reference']['#language']]) && isset($form['field_series_reference'][$form['field_series_reference']['#language']])) {
		//adjust sub topic reference select field
		$topics_and_series = views_get_view_result('utilities', 'block_1');
		
		$options_attributes = array(
			'_none' => array('class' => '_none'),
		);
		if (count($form['field_topic_reference'][$form['field_topic_reference']['#language']]['#options'])) {
			foreach ($form['field_topic_reference'][$form['field_topic_reference']['#language']]['#options'] as $key=>$value) {
				$options_attributes['_none']['class'] .= ' '.$key;
			}
		}
		
		//dsm($topics_and_series);
		
		foreach ($topics_and_series as $topic_series) {
			$options_attributes[$topic_series->nid] = array('class' => $topic_series->node_field_data_field_topic_reference_nid); //series_nid => array('class' => topic_nid)
		}
		$form['field_series_reference'][$form['field_series_reference']['#language']]['#options_attributes'] = $options_attributes;
		$form['field_series_reference'][$form['field_series_reference']['#language']]['#chained_selects'] = array(
			'parent' => 'edit-field-topic-reference-'.$form['field_topic_reference']['#language'],
			'child'  => 'edit-field-series-reference-'.$form['field_series_reference']['#language'],
		);
	}
	
	//dsm(get_defined_vars());
	
}


/**
 * return content meta info i.e. comments, playlist, related
 */
function _ugyouthportal_get_content_meta_info($node_content, $node) {
	
	//dsm($node_content);
	//dsm($node);
	
	//series info
	$series_info = _ugyouthportal_get_node_series_content($node);
	
	//comments
	$comment_info = array (
		'comments_html' => render($node_content['comments']),
		'comment_count' => $node->comment_count,
	);
	
	//related content - wikipedia
	$related_info = false;
	/*
	if (isset($node_content['field_url']['#items']) && count($node_content['field_url']['#items'])) {
		$wikipedia_str = '<span class="wikipedia-content clearfix">';
		$wikipedia_str .= '<span class="img">'.render($node_content['field_wikipedia_article_image']).'</span>';
		$wikipedia_str .= '<span class="desc">';
		$wikipedia_str .= '<span class="title">'.render($node_content['field_wikipedia_article_title']).'</span>';
		$wikipedia_str .= '<span class="body">'.render($node_content['field_wikipedia_article_body']).'</span>';
		$wikipedia_str .= '</span></span>';
		$wikipedia_str_linked = '<h2>On Wikipedia</h2>'.l($wikipedia_str, $node_content['field_url']['#items'][0]['safe_value'], array (
			'attributes' => array (
				'title'	=>	'Read on Wikipedia: '.$node_content['field_wikipedia_article_title']['#items'][0]['safe_value'],
			),
			'html'	=> true,
		));
		$related_info = array (
			'link_count' => 1, //only wikipedia
			'wikipedia_str' => $wikipedia_str_linked, 
		);
	}
	*/
	
	
	//make navigation
	$meta_info_nav = '<ul class="meta-content-menu">';
	$related_content_nav = '';
	
	//comments navigation
	$no_comments = $comment_info['comment_count'] . (($comment_info['comment_count']==1) ? ' comment' : ' comments');
	$meta_info_nav .= '<li class="nav-btn nav-btn-comments nav-btn-first"><a class="btn" href="#comments" title="Check out the comments">Comments <span>('.$no_comments.')</span></a></li>';
	
	//playlist navigation
	if ($series_info) {
		$no_items = $series_info['playlist-no'] . (($series_info['playlist-no']>1) ? ' items' : ' item');
		$series_nav_classes = 'nav-btn nav-btn-playlist';
		if(!$related_info) $series_nav_classes .= ' nav-btn-last';
		$meta_info_nav .= '<li class="'.$series_nav_classes.'"><a class="btn" href="#playlist" title="View the playlist for this series">Playlist <span>('.$no_items.')</span></a></li>';
	}
	
	//related content
	if ($related_info) {
		$no_related = $related_info['link_count'] . (($related_info['link_count']==1) ? ' link' : ' links');
		$related_content_nav = '<li class="nav-btn nav-btn-related-content nav-btn-last"><a class="btn" href="#related-info" title="View related content and links">Related ('.$no_related.')</a></li>';		
	}
	
	//finish nav
	$meta_info_nav .= $related_content_nav.'</ul>';
	
	
	//make content and navigation
	//$meta_info_content = $meta_info_nav.'<div class="meta-content-wrapper" id="tabs_container">';
	$meta_info_content = '<div class="meta-content-wrapper clearfix" id="tabs_container">';
	$meta_info_content .= '<div id="comments" class="tab"><h2 class="tab-title">Comments</h2>'.$comment_info['comments_html'].'</div>';
	if ($series_info) {
		$meta_info_content .= '<div id="playlist" class="tab"><h2 class="tab-title">'.$series_info['series-title'].'</h2>'.$series_info['series-list-html'].'</div>';
	}
	if ($related_info) {
		$meta_info_content .= '<div id="related-info" class="only-wikipedia tab">';
		$meta_info_content .= '<div class="wikipedia-wrapper">'.$related_info['wikipedia_str'].'</div>';
		$meta_info_content .= '</div>';
	}
	$meta_info_content .= '</div>';
	
	
	return array (
		'content' => $meta_info_content,
		'nav' => $meta_info_nav,
		'prev_btn' => $series_info['previous-btn'],
		'next_btn' => $series_info['next-btn'],
	);
}


/**
 * return series content
 */
function _ugyouthportal_get_node_series_content($node) {
	
	//dsm($node);
	
	$language_index = isset($node->language) ? $node->language : 'und';
	$topic_language_index = 'und';
	$series_language_index = 'und';
	$in_series = (count($node->field_series_reference) && isset($node->field_series_reference[$series_language_index]) && count($node->field_series_reference[$series_language_index]));
	$topic_nid = $node->field_topic_reference[$topic_language_index][0]['target_id'];
	$topic_title = $node->field_topic_reference[$topic_language_index][0]['entity']->title;
	$topic_link = l($topic_title, 'node/'.$topic_nid, array(
  	'attributes' => array (
  		'title'	=>	t('See more content in ').$topic_title,
  	),
  	'html'	=> false,
  ));
	
	$previous_btn = false;
	$next_btn = false;
	$playlist_no = 0;
	
	if ($in_series) { //has a playlist
		$queue_details = _ugyouthportal_get_node_queue_details($node);
		$series_content = views_get_view_result('series', 'block_0', $queue_details['subqueue']->sqid);
		$playlist_no = count($series_content);
		$series_title = 'Playlist: '.$node->field_series_reference[$series_language_index][0]['entity']->title.' ('.$playlist_no.' items)';
		$series_content_str = '<ul class="series-content-wrapper series-playlist">';
	} else {
		$series_content = views_get_view_result('series', 'block_1', $topic_nid);
		$playlist_no = count($series_content);
		$series_title = t('Related content in ').$topic_link;
		$series_content_str = '<ul class="series-content-wrapper related-content">';
	}
	
	//dsm($node);
	//dsm($series_content);
	
	for ($i=0; $i<$playlist_no; $i++) {
		$series_item = $series_content[$i];
		
		//css classes
		$item_class_str = 'series-item series-item-type-'.$series_item->node_type.' series-item-no-'.$i;
		if ($i == 0) $item_class_str .= ' series-item-first';
		if ($i == $playlist_no-1) $item_class_str .= ' series-item-last';
		
		//add after and before active class
		if ($in_series && $i>0 && $_GET['q'] == 'node/'.$series_content[$i-1]->nid) {
			$item_class_str .= ' series-item-after-active';
		}
		if ($in_series && $i<$playlist_no-1 && $_GET['q'] == 'node/'.$series_content[$i+1]->nid) {
			$item_class_str .= ' series-item-before-active';
		}
		
		//get active page
		if ($_GET['q'] == 'node/'.$series_item->nid) {
			$item_class_str .= ' series-item-active';
			if ($in_series && $i-1 >= 0) {
				$previous_btn = l('<span></span>', 'node/'.$series_content[$i-1]->nid, array(
					'attributes' => array (
						'title'	=>	'Click to view previous item: '.$series_content[$i-1]->node_title,
					),
					'html'	=> true,
				));
			}
			if ($in_series && $i+1 < $playlist_no) {
				$next_btn = l('<span></span>', 'node/'.$series_content[$i+1]->nid, array(
					'attributes' => array (
						'title'	=>	'Click to view next item: '.$series_content[$i+1]->node_title,
					),
					'html'	=> true,
				));
			}
		}
		
		//series content item data
		if ($series_item->node_type=='video') {
			if ($series_item->field_field_image[0]['raw']['is_default'] && isset($series_item->field_field_video) && $series_item->field_field_video[0]['rendered']) {
				$img = render($series_item->field_field_video[0]['rendered']);
			} else {
				$img = render($series_item->field_field_image[0]['rendered']);
			}
		} else {
			$img = render($series_item->field_field_image[0]['rendered']);
		}
		//$txt = '<span class="title">'.$series_item->node_title.'</span><span class="body">'.render($series_item->field_body[0]['rendered']).'</span>';
		$txt = '<span class="title">'.$series_item->node_title.'</span>';
		$size = $series_item->field_field_file_size_duration[0]['rendered']['#markup'];
		//$size = _ugyouthportal_get_node_media_size($series_item->_field_data['nid']['entity']);
		
		//build series content item
		$series_item_str = '<span class="series-item-content">';
		$series_item_str .= '<span class="counter-no">'.($i+1).'</span>';
		$series_item_str .= '<span class="content-wrapper clearfix">';
		$series_item_str .= '<span class="img">'.$img.'<span class="icon"></span></span>';
		$series_item_str .= '<span class="txt">'.$txt;
		$series_item_str .= '<span class="size">'.$size.'</span></span>';
		$series_item_str .= '</span></span>';
		
		//link series content item
		$series_item_str_linked = l($series_item_str, 'node/'.$series_item->nid, array(
			'attributes' => array (
				'title'	=>	'Click to view this item: '.$series_item->node_title,
			),
			'html'	=> true,
		));
		
		$series_content_str .= '<li class="'.$item_class_str.'">'.$series_item_str_linked.'</li>';
	}

	$series_content_str .= '</ul>';
	
	return array (
		'series-list-html' => $series_content_str,
		'series-title' => $series_title,
		'playlist-no' => $playlist_no,
		'previous-btn' => $previous_btn,
		'next-btn' => $next_btn,
	);
}


/**
 * return node's media size
 */
function _ugyouthportal_get_node_media_size($file, $type) {
	switch ($type) {
		case 'video':
		case 'audio':
			$fileinfo = getID3_analyze($file);
			$time_str = isset($fileinfo['playtime_string']) ? $fileinfo['playtime_string'] : '';
			return $time_str.' mins';
		case 'document':
			$pdftext = file_get_contents($file);
			$no_pages = preg_match_all("/\/Page\W/", $pdftext, $dummy);
			return $no_pages.' pages';
	}
}


/**
 * modify views
 */


function ugyouthportal_views_pre_render(&$view) {
	global $ugyouthportal_data;
	
	//add a views class to the body
	if (strpos($view->current_display, 'page')!==false) {
		$ugyouthportal_data['body_classes'][] = 'views-'.$view->name.'-'.$view->current_display;
	}
	
	//inject special nids into start
	/**
	 * giving me headache because this disrupts the views paging
	 *
	 * moved into theme layer (didn't work - hogged too much memory)
	 */
	if ($view->name == 'listing_pages' && $view->current_display=='page_1') {
		//dsm($view);
		//get and resort special results
		$special_results = views_get_view_result('listing_pages', 'block_1');
		$sort_by_array = array();
		foreach ($special_results as $result) {
			$sort_by_array[] = array_search($result->nid, $ugyouthportal_data['listing_pages_special_nids']);
		}
		array_multisort($sort_by_array, SORT_ASC, $special_results);
		array_splice($view->result, 0, 0, $special_results);
		
		//adjust the pager as at: https://drupal.org/node/953072
		$view->query->pager->total_items += count($special_results); // reset the count of items
		$view->query->pager->update_page_info(); // update the pager object witht the correct number of items
		//$view->result = $resultNoDoubleNodes; // replace the old results with the results without duplicates
		//dsm($view);
  }
  /*************************************/
}



/**
 * alter listing page views
 *
function ugyouthportal_views_pre_render(&$view) {
}
*/

function ugyouthportal_views_query_alter(&$view, &$query) {
	
	if ($view->name == 'listing_pages') {
		global $ugyouthportal_data;
		
		if (!isset($ugyouthportal_data['listing_pages_special_nids']) || count($ugyouthportal_data['listing_pages_special_nids'])==0) {
			_ugyouthportal_set_listing_pages_special_nids();
		}
		
		if(($view->current_display=='page_1' || $view->current_display=='page_2') &&  $query->where){
			//add exclude nodes to query
			$query->where[] = array (
				'conditions' => array(
					array (
						'field' => 'node.nid NOT IN(:node_nid) OR node.nid IS NULL',
						'value' => array(
							':node_nid' => $ugyouthportal_data['listing_pages_special_nids'],
						),
						'operator' => 'formula',
					),
				),
				'args' => array(),
				'type' => 'AND',
			);
		}
		
		if($view->current_display=='block_1' &&  $query->where) {
			//dsm($query);
			$query->where[] = array (
				'conditions' => array(
					array (
						'field' => 'node.nid IN(:node_nid)',
						'value' => array(
							':node_nid' => $ugyouthportal_data['listing_pages_special_nids'],
						),
						'operator' => 'formula',
					),
				),
				'args' => array(),
				'type' => 'AND',
			);
		}
		
	}
		
	//dsm($query);
}


function _ugyouthportal_set_listing_pages_special_nids() {
	global $ugyouthportal_data;
	
	$special_starting_nids = array();
	$special_starting_nids_by_class = array();
	
	//get new nids
	$new_nids = _ugyouthportal_sort_algo_get_nids('new', false);
	$special_starting_nids = $new_nids['nids'];
	$special_starting_nids_by_class = $new_nids['nids_by_class'];
	
	//get recommended nids
	$recommended_nids = _ugyouthportal_sort_algo_get_nids('recommended', $special_starting_nids);
	$special_starting_nids = array_merge($special_starting_nids, $recommended_nids['nids']);
	$special_starting_nids_by_class = array_merge($special_starting_nids_by_class, $recommended_nids['nids_by_class']);
	
	//get commented nids
	$commented_nids = _ugyouthportal_sort_algo_get_nids('commented', $special_starting_nids);
	$special_starting_nids = array_merge($special_starting_nids, $commented_nids['nids']);
	$special_starting_nids_by_class = array_merge($special_starting_nids_by_class, $commented_nids['nids_by_class']);
	
	//get viewed nids
	$viewed_nids = _ugyouthportal_sort_algo_get_nids('viewed', $special_starting_nids);
	$special_starting_nids = array_merge($special_starting_nids, $viewed_nids['nids']);
	$special_starting_nids_by_class = array_merge($special_starting_nids_by_class, $viewed_nids['nids_by_class']);
	
	//get downloaded nids
	$downloaded_nids = _ugyouthportal_sort_algo_get_nids('downloaded', $special_starting_nids);
	$special_starting_nids = array_merge($special_starting_nids, $downloaded_nids['nids']);
	$special_starting_nids_by_class = array_merge($special_starting_nids_by_class, $downloaded_nids['nids_by_class']);
	
	$ugyouthportal_data['listing_pages_special_nids'] = $special_starting_nids;
	$ugyouthportal_data['listing_pages_special_nids_by_class'] = $special_starting_nids_by_class;
}


function _ugyouthportal_sort_algo_get_nids($type, $exclude_nids) {
	/**
	 * using static query building to maximise performance
	 */
	
	$result_nids = array();
	$result_nids_by_class = array();
	
	//get dates
	$time_month_ago = strtotime('-1 month');
	
	//exclude nids
	$where_clause_exclude_nids = false;
	if ($exclude_nids && is_array($exclude_nids) && count($exclude_nids)) {
		$where_clause_exclude_nids = " AND ( (node.nid NOT IN(".implode(',', $exclude_nids).") OR node.nid IS NULL) )";
	}
	
	//where clause
	$where_clause = "WHERE (node.status = '1') AND (node.type IN  ('audio', 'document', 'video'))";
	if ($where_clause_exclude_nids) $where_clause .= $where_clause_exclude_nids;
	
	//specific type changes
	switch ($type) {
		case 'new':
			$where_clause .= ' AND (node.created > '.$time_month_ago.')';
			break;
		case 'recommended':
			$where_clause .= ' AND (nodequeue_nodes_node.timestamp > '.$time_month_ago.') AND (nodequeue_nodes_node.nid != \'1\')';
			break;
		case 'commented':
			$where_clause .= ' AND (node_comment_statistics.last_comment_timestamp > '.$time_month_ago.')';
			break;
		case 'viewed':
			$where_clause .= ' AND (node_counter.timestamp >= '.strtotime('- 2 weeks').')';
			break;
		case 'downloaded':
			$where_clause .= ' AND (pubdlcnt.utime >= '.$time_month_ago.')';
			break;
	}
	
	$queries = array (
		'new' => 'SELECT node.nid AS nid, node.created AS node_created FROM {node} node '.$where_clause.' ORDER BY node_created DESC LIMIT 4 OFFSET 0',
		'recommended' => 'SELECT node.nid AS nid, nodequeue_nodes_node.position AS nodequeue_nodes_node_position FROM {node} node LEFT JOIN {nodequeue_nodes} nodequeue_nodes_node ON node.nid = nodequeue_nodes_node.nid AND nodequeue_nodes_node.qid = \'5\' '.$where_clause.' ORDER BY nodequeue_nodes_node_position ASC LIMIT 4 OFFSET 0',
		'commented' => 'SELECT node.nid AS nid, node_comment_statistics.comment_count AS node_comment_statistics_comment_count FROM {node} node INNER JOIN {node_comment_statistics} node_comment_statistics ON node.nid = node_comment_statistics.nid '.$where_clause.' ORDER BY node_comment_statistics_comment_count DESC LIMIT 4 OFFSET 0',
		'viewed' => 'SELECT node.nid AS nid, node_counter.totalcount AS node_counter_totalcount FROM {node} node LEFT JOIN {node_counter} node_counter ON node.nid = node_counter.nid '.$where_clause.' ORDER BY node_counter_totalcount DESC LIMIT 4 OFFSET 0',
		'downloaded' => 'SELECT node.nid AS nid, pubdlcnt.count AS pubdlcnt_count FROM {node} node LEFT JOIN {pubdlcnt} pubdlcnt ON node.nid = pubdlcnt.nid '.$where_clause.' ORDER BY pubdlcnt_count DESC LIMIT 4 OFFSET 0',
	);
	
	$query_results = db_query($queries[$type]);
	foreach ($query_results as $result) {
		if ($type=='recommended' && in_array($result->nid, $result_nids)) {
			continue;
		}
		$result_nids[] = $result->nid;
		$result_nids_by_class['nid-'.$result->nid] = $type;
	}
	
	return array('nids'=>$result_nids, 'nids_by_class'=>$result_nids_by_class,);
	
	/***
	 ** stopped using dynamic query building to maximise performance with a static query
	 **
	 ** see:
	 **
	 ** https://drupal.org/node/1848348
	 ** https://api.drupal.org/api/drupal/includes%21database%21select.inc/class/SelectQuery/7
	 ** http://www.lullabot.com/blog/article/simplify-your-code-drupal-7s-database-api
	 **
	 ** 
	$joined_tables = array(); // element = array('type'=>'leftjoin', 'table'=>'users', 'table_alias'=>'u', 'condition'=>'n.uid = u.uid AND u.uid = :uid', 'condition_values'=>array(':uid' => 5))
	
	$query = db_select('node', 'n');
	if (count($joined_tables)) {
		
	}
	$query = db_select('node', 'n')
						->fields('n', array('nid'))
						->condition('n.type', 'article', '=')
						->range(0, 50);
	$result = $query->execute();
	 **
	 **
	 */
}



/**
 */